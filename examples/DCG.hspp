{-# LANGUAGE DataKinds, FlexibleContexts, NoImplicitPrelude, NoMonomorphismRestriction, TypeApplications, TypeOperators #-}
module DCG where

import qualified Control.Monad.Logic as Logic
import Control.Monad.Logic.Moded.Prelude

data Tree = S Tree Tree | NP String String | VP String Tree deriving (Eq, Ord, Read, Show)
{- append/3
append arg1 arg2 arg3 :- ((arg1 = [], arg2 = b, arg3 = b); (arg1 = h:t, arg3 = h0:tb, h0 = h, append t b tb, arg2 = b))
constraints:
~append[1]
~(arg1[1,0] & h[1,0])
~(arg2[0,1] & b[0,1])
~(arg2[1,4] & b[1,4])
~(arg3[0,2] & b[0,2])
~(arg3[1,1] & h0[1,1])
~(b[0,1] & b[0,2])
~(b[1,3] & b[1,4])
~(h[1,0] & h[1,2])
~(h0[1,1] & h0[1,2])
~(h0[1,2] & h[1,2])
~(t[1,0] & t[1,3])
~(tb[1,1] & tb[1,3])
(b[0,1] | b[0,2])
(b[1,3] | b[1,4])
(h[1,0] | h[1,2])
(h0[1,1] | h0[1,2])
(t[1,0] | t[1,3])
(tb[1,1] | tb[1,3])
(arg1[] <-> arg1[0])
(arg1[] <-> arg1[1])
(arg1[0] <-> arg1[0,0])
(arg1[1] <-> arg1[1,0])
(arg2[] <-> arg2[0])
(arg2[] <-> arg2[1])
(arg2[0] <-> arg2[0,1])
(arg2[1] <-> arg2[1,4])
(arg3[] <-> arg3[0])
(arg3[] <-> arg3[1])
(arg3[0] <-> arg3[0,2])
(arg3[1] <-> arg3[1,1])
(b[1,3] <-> arg2[])
(h[1,0] <-> t[1,0])
(h0[1,1] <-> tb[1,1])
(t[1,3] <-> arg1[])
(tb[1,3] <-> arg3[])
1
-}

append = rget $ (procedure @'[ In,In,In] appendIII) :& (procedure @'[ In,In,Out] appendIIO) :& (procedure @'[ In,Out,In] appendIOI) :& (procedure @'[ Out,In,In] appendOII) :& (procedure @'[ Out,Out,In] appendOOI) :& RNil
  where
    appendIII = \arg1 arg2 arg3 -> Logic.once $ do
      -- solution: b[0,1] b[1,4] h[1,0] h0[1,1] t[1,0] tb[1,1]
      -- cost: 1
      () <- (do
        guard $ arg1 == []
        b <- pure arg2
        guard $ arg3 == b
        pure ()
       ) <|> (do
        (h:t) <- pure arg1
        b <- pure arg2
        (h0:tb) <- pure arg3
        guard $ h0 == h
        () <- appendIII t b tb
        pure ()
       )
      pure ()
    
    appendIIO = \arg1 arg2 -> do
      -- solution: arg3[] arg3[0] arg3[0,2] arg3[1] arg3[1,1] b[0,1] b[1,4] h[1,0] h0[1,2] t[1,0] tb[1,3]
      -- cost: 2
      (arg3) <- (do
        guard $ arg1 == []
        b <- pure arg2
        arg3 <- pure b
        pure (arg3)
       ) <|> (do
        (h:t) <- pure arg1
        b <- pure arg2
        h0 <- pure h
        (OneTuple (tb)) <- appendIIO t b
        arg3 <- pure (h0:tb)
        pure (arg3)
       )
      pure (OneTuple (arg3))
    
    appendIOI = \arg1 arg3 -> do
      -- solution: arg2[] arg2[0] arg2[0,1] arg2[1] arg2[1,4] b[0,2] b[1,3] h[1,0] h0[1,1] t[1,0] tb[1,1]
      -- cost: 2
      (arg2) <- (do
        guard $ arg1 == []
        b <- pure arg3
        arg2 <- pure b
        pure (arg2)
       ) <|> (do
        (h:t) <- pure arg1
        (h0:tb) <- pure arg3
        guard $ h0 == h
        (OneTuple (b)) <- appendIOI t tb
        arg2 <- pure b
        pure (arg2)
       )
      pure (OneTuple (arg2))
    
    appendOII = \arg2 arg3 -> do
      -- solution: arg1[] arg1[0] arg1[0,0] arg1[1] arg1[1,0] b[0,1] b[1,4] h[1,2] h0[1,1] t[1,3] tb[1,1]
      -- cost: 2
      (arg1) <- (do
        arg1 <- pure []
        b <- pure arg2
        guard $ arg3 == b
        pure (arg1)
       ) <|> (do
        b <- pure arg2
        (h0:tb) <- pure arg3
        h <- pure h0
        (OneTuple (t)) <- appendOII b tb
        arg1 <- pure (h:t)
        pure (arg1)
       )
      pure (OneTuple (arg1))
    
    appendOOI = \arg3 -> do
      -- solution: arg1[] arg1[0] arg1[0,0] arg1[1] arg1[1,0] arg2[] arg2[0] arg2[0,1] arg2[1] arg2[1,4] b[0,2] b[1,3] h[1,2] h0[1,1] t[1,3] tb[1,1]
      -- cost: 3
      (arg1,arg2) <- (do
        arg1 <- pure []
        b <- pure arg3
        arg2 <- pure b
        pure (arg1,arg2)
       ) <|> (do
        (h0:tb) <- pure arg3
        h <- pure h0
        (t,b) <- appendOOI tb
        arg1 <- pure (h:t)
        arg2 <- pure b
        pure (arg1,arg2)
       )
      pure (arg1,arg2)
    
{- det/1
det arg1 :- ((arg1 = "the"); (arg1 = "a"))
constraints:
(arg1[] <-> arg1[0])
(arg1[] <-> arg1[1])
(arg1[0] <-> arg1[0,0])
(arg1[1] <-> arg1[1,0])
-}

det = rget $ (procedure @'[ In] detI) :& (procedure @'[ Out] detO) :& RNil
  where
    detI = \arg1 -> Logic.once $ do
      -- solution: 
      -- cost: 0
      () <- (do
        guard $ arg1 == "the"
        pure ()
       ) <|> (do
        guard $ arg1 == "a"
        pure ()
       )
      pure ()
    
    detO = do
      -- solution: arg1[] arg1[0] arg1[0,0] arg1[1] arg1[1,0]
      -- cost: 0
      (arg1) <- (do
        arg1 <- pure "the"
        pure (arg1)
       ) <|> (do
        arg1 <- pure "a"
        pure (arg1)
       )
      pure (OneTuple (arg1))
    
{- noun/1
noun arg1 :- ((arg1 = "cat"); (arg1 = "bat"))
constraints:
(arg1[] <-> arg1[0])
(arg1[] <-> arg1[1])
(arg1[0] <-> arg1[0,0])
(arg1[1] <-> arg1[1,0])
-}

noun = rget $ (procedure @'[ In] nounI) :& (procedure @'[ Out] nounO) :& RNil
  where
    nounI = \arg1 -> Logic.once $ do
      -- solution: 
      -- cost: 0
      () <- (do
        guard $ arg1 == "cat"
        pure ()
       ) <|> (do
        guard $ arg1 == "bat"
        pure ()
       )
      pure ()
    
    nounO = do
      -- solution: arg1[] arg1[0] arg1[0,0] arg1[1] arg1[1,0]
      -- cost: 0
      (arg1) <- (do
        arg1 <- pure "cat"
        pure (arg1)
       ) <|> (do
        arg1 <- pure "bat"
        pure (arg1)
       )
      pure (OneTuple (arg1))
    
{- verb/1
verb arg1 :- ((arg1 = "eats"))
constraints:
(arg1[] <-> arg1[0])
(arg1[0] <-> arg1[0,0])
-}

verb = rget $ (procedure @'[ In] verbI) :& (procedure @'[ Out] verbO) :& RNil
  where
    verbI = \arg1 -> Logic.once $ do
      -- solution: 
      -- cost: 0
      () <- (do
        guard $ arg1 == "eats"
        pure ()
       )
      pure ()
    
    verbO = do
      -- solution: arg1[] arg1[0] arg1[0,0]
      -- cost: 0
      (arg1) <- (do
        arg1 <- pure "eats"
        pure (arg1)
       )
      pure (OneTuple (arg1))
    
{- np/3
np arg1 arg2 arg3 :- ((append n carg3 b_3, append data1_1_5 b_3 b_0, data1_1_5 = " ", append d b_0 carg4, arg1 = NP d n, det d, noun n, arg2 = carg3, arg3 = carg4))
constraints:
~append[0]
~det[0]
~noun[0]
~(arg1[0,4] & d[0,4])
~(arg2[0,7] & carg3[0,7])
~(arg3[0,8] & carg4[0,8])
~(b_0[0,1] & b_0[0,3])
~(b_3[0,0] & b_3[0,1])
~(carg3[0,0] & carg3[0,7])
~(carg4[0,3] & carg4[0,8])
~(d[0,3] & d[0,4])
~(d[0,3] & d[0,5])
~(d[0,4] & d[0,5])
~(data1_1_5[0,1] & data1_1_5[0,2])
~(n[0,0] & n[0,4])
~(n[0,0] & n[0,6])
~(n[0,4] & n[0,6])
(b_0[0,1] | b_0[0,3])
(b_3[0,0] | b_3[0,1])
(carg3[0,0] | carg3[0,7])
(carg4[0,3] | carg4[0,8])
(d[0,3] | (d[0,4] | d[0,5]))
(d[0,5] | ~d[0,5])
(data1_1_5[0,1] | data1_1_5[0,2])
(n[0,0] | (n[0,4] | n[0,6]))
(n[0,6] | ~n[0,6])
((d[0,3] & (b_0[0,3] & ~carg4[0,3])) | ((d[0,3] & (~b_0[0,3] & ~carg4[0,3])) | ((~d[0,3] & (b_0[0,3] & ~carg4[0,3])) | ((~d[0,3] & (~b_0[0,3] & carg4[0,3])) | (~d[0,3] & (~b_0[0,3] & ~carg4[0,3]))))))
((data1_1_5[0,1] & (b_3[0,1] & ~b_0[0,1])) | ((data1_1_5[0,1] & (~b_3[0,1] & ~b_0[0,1])) | ((~data1_1_5[0,1] & (b_3[0,1] & ~b_0[0,1])) | ((~data1_1_5[0,1] & (~b_3[0,1] & b_0[0,1])) | (~data1_1_5[0,1] & (~b_3[0,1] & ~b_0[0,1]))))))
((n[0,0] & (carg3[0,0] & ~b_3[0,0])) | ((n[0,0] & (~carg3[0,0] & ~b_3[0,0])) | ((~n[0,0] & (carg3[0,0] & ~b_3[0,0])) | ((~n[0,0] & (~carg3[0,0] & b_3[0,0])) | (~n[0,0] & (~carg3[0,0] & ~b_3[0,0]))))))
(arg1[] <-> arg1[0])
(arg1[0] <-> arg1[0,4])
(arg2[] <-> arg2[0])
(arg2[0] <-> arg2[0,7])
(arg3[] <-> arg3[0])
(arg3[0] <-> arg3[0,8])
(d[0,4] <-> n[0,4])
1
-}

np = rget $ (procedure @'[ In,In,In] npIII) :& (procedure @'[ In,In,Out] npIIO) :& (procedure @'[ In,Out,In] npIOI) :& (procedure @'[ Out,In,In] npOII) :& (procedure @'[ Out,In,Out] npOIO) :& (procedure @'[ Out,Out,In] npOOI) :& RNil
  where
    npIII = \arg1 arg2 arg3 -> Logic.once $ do
      -- solution: b_0[0,3] b_3[0,1] carg3[0,7] carg4[0,8] d[0,4] data1_1_5[0,2] n[0,4]
      -- cost: 7
      () <- (do
        (NP d n) <- pure arg1
        carg3 <- pure arg2
        carg4 <- pure arg3
        data1_1_5 <- pure " "
        () <- runProcedure @'[ In] det d
        () <- runProcedure @'[ In] noun n
        (OneTuple (b_0)) <- runProcedure @'[ In,Out,In] append d carg4
        (OneTuple (b_3)) <- runProcedure @'[ In,Out,In] append data1_1_5 b_0
        () <- runProcedure @'[ In,In,In] append n carg3 b_3
        pure ()
       )
      pure ()
    
    npIIO = \arg1 arg2 -> do
      -- solution: arg3[] arg3[0] arg3[0,8] b_0[0,1] b_3[0,0] carg3[0,7] carg4[0,3] d[0,4] data1_1_5[0,2] n[0,4]
      -- cost: 8
      (arg3) <- (do
        (NP d n) <- pure arg1
        carg3 <- pure arg2
        data1_1_5 <- pure " "
        () <- runProcedure @'[ In] det d
        () <- runProcedure @'[ In] noun n
        (OneTuple (b_3)) <- runProcedure @'[ In,In,Out] append n carg3
        (OneTuple (b_0)) <- runProcedure @'[ In,In,Out] append data1_1_5 b_3
        (OneTuple (carg4)) <- runProcedure @'[ In,In,Out] append d b_0
        arg3 <- pure carg4
        pure (arg3)
       )
      pure (OneTuple (arg3))
    
    npIOI = \arg1 arg3 -> do
      -- solution: arg2[] arg2[0] arg2[0,7] b_0[0,3] b_3[0,1] carg3[0,0] carg4[0,8] d[0,4] data1_1_5[0,2] n[0,4]
      -- cost: 8
      (arg2) <- (do
        (NP d n) <- pure arg1
        carg4 <- pure arg3
        data1_1_5 <- pure " "
        () <- runProcedure @'[ In] det d
        () <- runProcedure @'[ In] noun n
        (OneTuple (b_0)) <- runProcedure @'[ In,Out,In] append d carg4
        (OneTuple (b_3)) <- runProcedure @'[ In,Out,In] append data1_1_5 b_0
        (OneTuple (carg3)) <- runProcedure @'[ In,Out,In] append n b_3
        arg2 <- pure carg3
        pure (arg2)
       )
      pure (OneTuple (arg2))
    
    npOII = \arg2 arg3 -> do
      -- solution: arg1[] arg1[0] arg1[0,4] b_0[0,3] b_3[0,1] carg3[0,7] carg4[0,8] d[0,5] data1_1_5[0,2] n[0,6]
      -- cost: 9
      (arg1) <- (do
        carg3 <- pure arg2
        carg4 <- pure arg3
        data1_1_5 <- pure " "
        (OneTuple (d)) <- runProcedure @'[ Out] det 
        (OneTuple (b_0)) <- runProcedure @'[ In,Out,In] append d carg4
        (OneTuple (b_3)) <- runProcedure @'[ In,Out,In] append data1_1_5 b_0
        (OneTuple (n)) <- runProcedure @'[ Out] noun 
        arg1 <- pure (NP d n)
        () <- runProcedure @'[ In,In,In] append n carg3 b_3
        pure (arg1)
       )
      pure (OneTuple (arg1))
    
    npOIO = \arg2 -> do
      -- solution: arg1[] arg1[0] arg1[0,4] arg3[] arg3[0] arg3[0,8] b_0[0,1] b_3[0,0] carg3[0,7] carg4[0,3] d[0,5] data1_1_5[0,2] n[0,6]
      -- cost: 10
      (arg1,arg3) <- (do
        carg3 <- pure arg2
        data1_1_5 <- pure " "
        (OneTuple (d)) <- runProcedure @'[ Out] det 
        (OneTuple (n)) <- runProcedure @'[ Out] noun 
        arg1 <- pure (NP d n)
        (OneTuple (b_3)) <- runProcedure @'[ In,In,Out] append n carg3
        (OneTuple (b_0)) <- runProcedure @'[ In,In,Out] append data1_1_5 b_3
        (OneTuple (carg4)) <- runProcedure @'[ In,In,Out] append d b_0
        arg3 <- pure carg4
        pure (arg1,arg3)
       )
      pure (arg1,arg3)
    
    npOOI = \arg3 -> do
      -- solution: arg1[] arg1[0] arg1[0,4] arg2[] arg2[0] arg2[0,7] b_0[0,3] b_3[0,1] carg3[0,0] carg4[0,8] d[0,5] data1_1_5[0,2] n[0,6]
      -- cost: 10
      (arg1,arg2) <- (do
        carg4 <- pure arg3
        data1_1_5 <- pure " "
        (OneTuple (d)) <- runProcedure @'[ Out] det 
        (OneTuple (b_0)) <- runProcedure @'[ In,Out,In] append d carg4
        (OneTuple (b_3)) <- runProcedure @'[ In,Out,In] append data1_1_5 b_0
        (OneTuple (n)) <- runProcedure @'[ Out] noun 
        arg1 <- pure (NP d n)
        (OneTuple (carg3)) <- runProcedure @'[ In,Out,In] append n b_3
        arg2 <- pure carg3
        pure (arg1,arg2)
       )
      pure (arg1,arg2)
    
{- vp/3
vp arg1 arg2 arg3 :- ((np n carg3 b_3, append data1_1_5 b_3 b_0, data1_1_5 = " ", append v b_0 carg4, arg1 = VP v n, verb v, arg2 = carg3, arg3 = carg4))
constraints:
~append[0]
~np[0]
~verb[0]
~(arg1[0,4] & v[0,4])
~(arg2[0,6] & carg3[0,6])
~(arg3[0,7] & carg4[0,7])
~(b_0[0,1] & b_0[0,3])
~(b_3[0,0] & b_3[0,1])
~(carg3[0,0] & carg3[0,6])
~(carg4[0,3] & carg4[0,7])
~(data1_1_5[0,1] & data1_1_5[0,2])
~(n[0,0] & n[0,4])
~(v[0,3] & v[0,4])
~(v[0,3] & v[0,5])
~(v[0,4] & v[0,5])
(b_0[0,1] | b_0[0,3])
(b_3[0,0] | b_3[0,1])
(carg3[0,0] | carg3[0,6])
(carg4[0,3] | carg4[0,7])
(data1_1_5[0,1] | data1_1_5[0,2])
(n[0,0] | n[0,4])
(v[0,3] | (v[0,4] | v[0,5]))
(v[0,5] | ~v[0,5])
((data1_1_5[0,1] & (b_3[0,1] & ~b_0[0,1])) | ((data1_1_5[0,1] & (~b_3[0,1] & ~b_0[0,1])) | ((~data1_1_5[0,1] & (b_3[0,1] & ~b_0[0,1])) | ((~data1_1_5[0,1] & (~b_3[0,1] & b_0[0,1])) | (~data1_1_5[0,1] & (~b_3[0,1] & ~b_0[0,1]))))))
((n[0,0] & (carg3[0,0] & ~b_3[0,0])) | ((n[0,0] & (~carg3[0,0] & b_3[0,0])) | ((n[0,0] & (~carg3[0,0] & ~b_3[0,0])) | ((~n[0,0] & (carg3[0,0] & ~b_3[0,0])) | ((~n[0,0] & (~carg3[0,0] & b_3[0,0])) | (~n[0,0] & (~carg3[0,0] & ~b_3[0,0])))))))
((v[0,3] & (b_0[0,3] & ~carg4[0,3])) | ((v[0,3] & (~b_0[0,3] & ~carg4[0,3])) | ((~v[0,3] & (b_0[0,3] & ~carg4[0,3])) | ((~v[0,3] & (~b_0[0,3] & carg4[0,3])) | (~v[0,3] & (~b_0[0,3] & ~carg4[0,3]))))))
(arg1[] <-> arg1[0])
(arg1[0] <-> arg1[0,4])
(arg2[] <-> arg2[0])
(arg2[0] <-> arg2[0,6])
(arg3[] <-> arg3[0])
(arg3[0] <-> arg3[0,7])
(v[0,4] <-> n[0,4])
1
-}

vp = rget $ (procedure @'[ In,In,In] vpIII) :& (procedure @'[ In,In,Out] vpIIO) :& (procedure @'[ In,Out,In] vpIOI) :& (procedure @'[ Out,In,In] vpOII) :& (procedure @'[ Out,In,Out] vpOIO) :& (procedure @'[ Out,Out,In] vpOOI) :& RNil
  where
    vpIII = \arg1 arg2 arg3 -> Logic.once $ do
      -- solution: b_0[0,3] b_3[0,1] carg3[0,6] carg4[0,7] data1_1_5[0,2] n[0,4] v[0,4]
      -- cost: 6
      () <- (do
        (VP v n) <- pure arg1
        carg3 <- pure arg2
        carg4 <- pure arg3
        data1_1_5 <- pure " "
        () <- runProcedure @'[ In] verb v
        (OneTuple (b_0)) <- runProcedure @'[ In,Out,In] append v carg4
        (OneTuple (b_3)) <- runProcedure @'[ In,Out,In] append data1_1_5 b_0
        () <- runProcedure @'[ In,In,In] np n carg3 b_3
        pure ()
       )
      pure ()
    
    vpIIO = \arg1 arg2 -> do
      -- solution: arg3[] arg3[0] arg3[0,7] b_0[0,1] b_3[0,0] carg3[0,6] carg4[0,3] data1_1_5[0,2] n[0,4] v[0,4]
      -- cost: 7
      (arg3) <- (do
        (VP v n) <- pure arg1
        carg3 <- pure arg2
        data1_1_5 <- pure " "
        () <- runProcedure @'[ In] verb v
        (OneTuple (b_3)) <- runProcedure @'[ In,In,Out] np n carg3
        (OneTuple (b_0)) <- runProcedure @'[ In,In,Out] append data1_1_5 b_3
        (OneTuple (carg4)) <- runProcedure @'[ In,In,Out] append v b_0
        arg3 <- pure carg4
        pure (arg3)
       )
      pure (OneTuple (arg3))
    
    vpIOI = \arg1 arg3 -> do
      -- solution: arg2[] arg2[0] arg2[0,6] b_0[0,3] b_3[0,1] carg3[0,0] carg4[0,7] data1_1_5[0,2] n[0,4] v[0,4]
      -- cost: 7
      (arg2) <- (do
        (VP v n) <- pure arg1
        carg4 <- pure arg3
        data1_1_5 <- pure " "
        () <- runProcedure @'[ In] verb v
        (OneTuple (b_0)) <- runProcedure @'[ In,Out,In] append v carg4
        (OneTuple (b_3)) <- runProcedure @'[ In,Out,In] append data1_1_5 b_0
        (OneTuple (carg3)) <- runProcedure @'[ In,Out,In] np n b_3
        arg2 <- pure carg3
        pure (arg2)
       )
      pure (OneTuple (arg2))
    
    vpOII = \arg2 arg3 -> do
      -- solution: arg1[] arg1[0] arg1[0,4] b_0[0,3] b_3[0,1] carg3[0,6] carg4[0,7] data1_1_5[0,2] n[0,0] v[0,5]
      -- cost: 8
      (arg1) <- (do
        carg3 <- pure arg2
        carg4 <- pure arg3
        data1_1_5 <- pure " "
        (OneTuple (v)) <- runProcedure @'[ Out] verb 
        (OneTuple (b_0)) <- runProcedure @'[ In,Out,In] append v carg4
        (OneTuple (b_3)) <- runProcedure @'[ In,Out,In] append data1_1_5 b_0
        (OneTuple (n)) <- runProcedure @'[ Out,In,In] np carg3 b_3
        arg1 <- pure (VP v n)
        pure (arg1)
       )
      pure (OneTuple (arg1))
    
    vpOIO = \arg2 -> do
      -- solution: arg1[] arg1[0] arg1[0,4] arg3[] arg3[0] arg3[0,7] b_0[0,1] b_3[0,0] carg3[0,6] carg4[0,3] data1_1_5[0,2] n[0,0] v[0,5]
      -- cost: 9
      (arg1,arg3) <- (do
        carg3 <- pure arg2
        data1_1_5 <- pure " "
        (OneTuple (v)) <- runProcedure @'[ Out] verb 
        (n,b_3) <- runProcedure @'[ Out,In,Out] np carg3
        arg1 <- pure (VP v n)
        (OneTuple (b_0)) <- runProcedure @'[ In,In,Out] append data1_1_5 b_3
        (OneTuple (carg4)) <- runProcedure @'[ In,In,Out] append v b_0
        arg3 <- pure carg4
        pure (arg1,arg3)
       )
      pure (arg1,arg3)
    
    vpOOI = \arg3 -> do
      -- solution: arg1[] arg1[0] arg1[0,4] arg2[] arg2[0] arg2[0,6] b_0[0,3] b_3[0,1] carg3[0,0] carg4[0,7] data1_1_5[0,2] n[0,0] v[0,5]
      -- cost: 9
      (arg1,arg2) <- (do
        carg4 <- pure arg3
        data1_1_5 <- pure " "
        (OneTuple (v)) <- runProcedure @'[ Out] verb 
        (OneTuple (b_0)) <- runProcedure @'[ In,Out,In] append v carg4
        (OneTuple (b_3)) <- runProcedure @'[ In,Out,In] append data1_1_5 b_0
        (n,carg3) <- runProcedure @'[ Out,Out,In] np b_3
        arg1 <- pure (VP v n)
        arg2 <- pure carg3
        pure (arg1,arg2)
       )
      pure (arg1,arg2)
    
{- sentence/3
sentence arg1 arg2 arg3 :- ((vp v carg3 b_3, append data1_1_5 b_3 b_0, data1_1_5 = " ", np n b_0 carg4, arg1 = S n v, arg2 = carg3, arg3 = carg4))
constraints:
~append[0]
~np[0]
~vp[0]
~(arg1[0,4] & n[0,4])
~(arg2[0,5] & carg3[0,5])
~(arg3[0,6] & carg4[0,6])
~(b_0[0,1] & b_0[0,3])
~(b_3[0,0] & b_3[0,1])
~(carg3[0,0] & carg3[0,5])
~(carg4[0,3] & carg4[0,6])
~(data1_1_5[0,1] & data1_1_5[0,2])
~(n[0,3] & n[0,4])
~(v[0,0] & v[0,4])
(b_0[0,1] | b_0[0,3])
(b_3[0,0] | b_3[0,1])
(carg3[0,0] | carg3[0,5])
(carg4[0,3] | carg4[0,6])
(data1_1_5[0,1] | data1_1_5[0,2])
(n[0,3] | n[0,4])
(v[0,0] | v[0,4])
((data1_1_5[0,1] & (b_3[0,1] & ~b_0[0,1])) | ((data1_1_5[0,1] & (~b_3[0,1] & ~b_0[0,1])) | ((~data1_1_5[0,1] & (b_3[0,1] & ~b_0[0,1])) | ((~data1_1_5[0,1] & (~b_3[0,1] & b_0[0,1])) | (~data1_1_5[0,1] & (~b_3[0,1] & ~b_0[0,1]))))))
((n[0,3] & (b_0[0,3] & ~carg4[0,3])) | ((n[0,3] & (~b_0[0,3] & carg4[0,3])) | ((n[0,3] & (~b_0[0,3] & ~carg4[0,3])) | ((~n[0,3] & (b_0[0,3] & ~carg4[0,3])) | ((~n[0,3] & (~b_0[0,3] & carg4[0,3])) | (~n[0,3] & (~b_0[0,3] & ~carg4[0,3])))))))
((v[0,0] & (carg3[0,0] & ~b_3[0,0])) | ((v[0,0] & (~carg3[0,0] & b_3[0,0])) | ((v[0,0] & (~carg3[0,0] & ~b_3[0,0])) | ((~v[0,0] & (carg3[0,0] & ~b_3[0,0])) | ((~v[0,0] & (~carg3[0,0] & b_3[0,0])) | (~v[0,0] & (~carg3[0,0] & ~b_3[0,0])))))))
(arg1[] <-> arg1[0])
(arg1[0] <-> arg1[0,4])
(arg2[] <-> arg2[0])
(arg2[0] <-> arg2[0,5])
(arg3[] <-> arg3[0])
(arg3[0] <-> arg3[0,6])
(n[0,4] <-> v[0,4])
1
-}

sentence = rget $ (procedure @'[ In,In,In] sentenceIII) :& (procedure @'[ In,In,Out] sentenceIIO) :& (procedure @'[ In,Out,In] sentenceIOI) :& (procedure @'[ Out,In,In] sentenceOII) :& (procedure @'[ Out,In,Out] sentenceOIO) :& (procedure @'[ Out,Out,In] sentenceOOI) :& RNil
  where
    sentenceIII = \arg1 arg2 arg3 -> Logic.once $ do
      -- solution: b_0[0,3] b_3[0,1] carg3[0,5] carg4[0,6] data1_1_5[0,2] n[0,4] v[0,4]
      -- cost: 5
      () <- (do
        (S n v) <- pure arg1
        carg3 <- pure arg2
        carg4 <- pure arg3
        data1_1_5 <- pure " "
        (OneTuple (b_0)) <- runProcedure @'[ In,Out,In] np n carg4
        (OneTuple (b_3)) <- runProcedure @'[ In,Out,In] append data1_1_5 b_0
        () <- runProcedure @'[ In,In,In] vp v carg3 b_3
        pure ()
       )
      pure ()
    
    sentenceIIO = \arg1 arg2 -> do
      -- solution: arg3[] arg3[0] arg3[0,6] b_0[0,1] b_3[0,0] carg3[0,5] carg4[0,3] data1_1_5[0,2] n[0,4] v[0,4]
      -- cost: 6
      (arg3) <- (do
        (S n v) <- pure arg1
        carg3 <- pure arg2
        data1_1_5 <- pure " "
        (OneTuple (b_3)) <- runProcedure @'[ In,In,Out] vp v carg3
        (OneTuple (b_0)) <- runProcedure @'[ In,In,Out] append data1_1_5 b_3
        (OneTuple (carg4)) <- runProcedure @'[ In,In,Out] np n b_0
        arg3 <- pure carg4
        pure (arg3)
       )
      pure (OneTuple (arg3))
    
    sentenceIOI = \arg1 arg3 -> do
      -- solution: arg2[] arg2[0] arg2[0,5] b_0[0,3] b_3[0,1] carg3[0,0] carg4[0,6] data1_1_5[0,2] n[0,4] v[0,4]
      -- cost: 6
      (arg2) <- (do
        (S n v) <- pure arg1
        carg4 <- pure arg3
        data1_1_5 <- pure " "
        (OneTuple (b_0)) <- runProcedure @'[ In,Out,In] np n carg4
        (OneTuple (b_3)) <- runProcedure @'[ In,Out,In] append data1_1_5 b_0
        (OneTuple (carg3)) <- runProcedure @'[ In,Out,In] vp v b_3
        arg2 <- pure carg3
        pure (arg2)
       )
      pure (OneTuple (arg2))
    
    sentenceOII = \arg2 arg3 -> do
      -- solution: arg1[] arg1[0] arg1[0,4] b_0[0,3] b_3[0,1] carg3[0,5] carg4[0,6] data1_1_5[0,2] n[0,3] v[0,0]
      -- cost: 7
      (arg1) <- (do
        carg3 <- pure arg2
        carg4 <- pure arg3
        data1_1_5 <- pure " "
        (n,b_0) <- runProcedure @'[ Out,Out,In] np carg4
        (OneTuple (b_3)) <- runProcedure @'[ In,Out,In] append data1_1_5 b_0
        (OneTuple (v)) <- runProcedure @'[ Out,In,In] vp carg3 b_3
        arg1 <- pure (S n v)
        pure (arg1)
       )
      pure (OneTuple (arg1))
    
    sentenceOIO = \arg2 -> do
      -- solution: arg1[] arg1[0] arg1[0,4] arg3[] arg3[0] arg3[0,6] b_0[0,1] b_3[0,0] carg3[0,5] carg4[0,3] data1_1_5[0,2] n[0,3] v[0,0]
      -- cost: 8
      (arg1,arg3) <- (do
        carg3 <- pure arg2
        data1_1_5 <- pure " "
        (v,b_3) <- runProcedure @'[ Out,In,Out] vp carg3
        (OneTuple (b_0)) <- runProcedure @'[ In,In,Out] append data1_1_5 b_3
        (n,carg4) <- runProcedure @'[ Out,In,Out] np b_0
        arg1 <- pure (S n v)
        arg3 <- pure carg4
        pure (arg1,arg3)
       )
      pure (arg1,arg3)
    
    sentenceOOI = \arg3 -> do
      -- solution: arg1[] arg1[0] arg1[0,4] arg2[] arg2[0] arg2[0,5] b_0[0,3] b_3[0,1] carg3[0,0] carg4[0,6] data1_1_5[0,2] n[0,3] v[0,0]
      -- cost: 8
      (arg1,arg2) <- (do
        carg4 <- pure arg3
        data1_1_5 <- pure " "
        (n,b_0) <- runProcedure @'[ Out,Out,In] np carg4
        (OneTuple (b_3)) <- runProcedure @'[ In,Out,In] append data1_1_5 b_0
        (v,carg3) <- runProcedure @'[ Out,Out,In] vp b_3
        arg1 <- pure (S n v)
        arg2 <- pure carg3
        pure (arg1,arg2)
       )
      pure (arg1,arg2)
    